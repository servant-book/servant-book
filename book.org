#+TITLE: Servant at your service
#+LANGUAGE: en
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper,drafting]

#+LATEX_HEADER: \renewcommand\maketitle{}

# disable tic so it doesn't appear at the top but where we want it instead
#+Options: toc:nil ^:nil 

# we have our own title
#+Options: title:nil

# we don't want numbering to appear in front of headings until
#+OPTIONS: H:5

# table alternating colors
#+LATEX_HEADER: \usepackage[table,fancyvrb]{xcolor}

# bibtex stuff
#+LATEX_HEADER: \usepackage[square,sort,comma,numbers]{natbib}
#+LATEX_HEADER: \renewcommand{\bibsection}{}

# todo notes
#+LATEX_HEADER: \usepackage[obeyFinal, colorinlistoftodos]{todonotes}
#+LATEX_HEADER: \newcommand{\ask}[1]{\todo[color=cyan]{#1}}
#+LATEX_HEADER: \newcommand{\dignum}[1]{\todo[color=brown]{#1}}
#+LATEX_HEADER: \newcommand{\drafting}{\todo[noline, color=gray]{working draft}}
#+LATEX_HEADER: \newcommand{\toReview}{\todo[noline, color=yellow]{to review}}
#+LATEX_HEADER: \newcommand{\newlyCleared}{\todo[noline, backgroundcolor=white, bordercolor=red]{newly cleared}}
# (something cleared that was under discussion last time)
#+LATEX_HEADER: \newcommand{\cleared}{\todo[noline, color=white]{cleared}}
#+LATEX_HEADER: \newcommand{\doubleCleared}{\todo[noline, backgroundcolor=white, bordercolor=gray]{cleared II}}
#+LATEX_HEADER: \newcommand{\tripleCleared}{\todo[noline, backgroundcolor=white, bordercolor=lightgray]{cleared III}}
#+LATEX_HEADER: \newcommand{\quadCleared}{\todo[noline, backgroundcolor=white, bordercolor=white]{cleared IV}}

# alternating table rows
#+LATEX: \rowcolors{1}{white}{gray!25}

# Title page
#+LATEX: \input{title}

# The order of this thesis will be done in a way to let future researcher
# decide the value of the thesis quickly
# 1. First the abstract to let a researcher quickly discard this thesis if necessary.
# 2. The toc, to let a researcher jump to interesting pages quickly.
# 3. The introduction and main body of the thesis. If all else fails a
# researcher can use this as fallback

# smaller code font size (cause mostly boring XML)
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}
# Make listing captions smaller, to fit with smaller code size
#+LATEX_HEADER: \usepackage[skip=0pt]{caption}
#+LATEX_HEADER: \captionsetup[listing]{font=footnotesize}
#+LATEX_HEADER: \captionsetup[table]{skip=5pt}
#+LATEX_HEADER: \captionsetup[figure]{skip=10pt}

# Inline code has a light grey background
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \definecolor{Light}{gray}{.85}
#+LATEX_HEADER: \sethlcolor{Light}

#+LATEX_HEADER: \let\OldTexttt\texttt
#+LATEX_HEADER: \renewcommand{\texttt}[1]{\OldTexttt{\hl{#1}}}%

# for \FloatBarrier, prevents figures from floating over sections etc
#+LATEX_HEADER: \usepackage{placeins}

\todo[inline]{Table alteration darker: dark enough now?}
** Abstract                                                          
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_CENTER

\drafting
Maybe a motivation instead

#+END_CENTER

*** Keywords
:PROPERTIES:
:UNNUMBERED: t
:END:
\drafting
Servant? Do we need this?

\newpage
#+TOC: headlines 2

\newpage

* Introduction
\drafting

ddd

Make a reference to some paper cite:augello2015social
(need to install https://github.com/jkitchin/org-ref, idk,
it seemed a good idea when working alone.)


* Simple web servant
\todo{move to intro}
There are many [[https://github.com/bitemyapp/learnhaskell][guides
available]] for learning Haskell. Setting up a something simple like a
web server isn't so straight forward. Perhaps choosing one of the
[[https://wiki.haskell.org/Web/Frameworks][14 libraries]] is a bit much.

#+CAPTION: Type level hell: Haskell sucks
[[images/haskell-sucks.jpg]]

\toReview
This guide will give opinionated web server start. This guide assumes no
experience with Haskell, and will get you up to speed with a (REST) web
server called
[[http://haskell-servant.readthedocs.io/en/stable/][Servant]]. Servant
is a good choice as it can describe both a server and client API. In the
future this guide may be used as a foundation to create something more
meaningful than just a very basic REST API, this will provide a good
starting point however. Basic UNIX (command line) skills are assumed.

** from nothing, start with build tools
  :PROPERTIES:
  :CUSTOM_ID: from-nothing-start-with-build-tools
  :END:

\toReview
Install stack:

#+BEGIN_SRC sh
    curl -sSL https://get.haskellstack.org/ | sh
#+END_SRC

\toReview
Only attempt shortly to install it trough a package manager. There are
other Haskell build tools, they will be more difficult in use. There is
also the possibility for fully reproducible builds at a system level
(nix). Which is out of the scope of this guide.

\toReview
Now setup a new project:

#+BEGIN_SRC sh
    stack new awesome-project-name 
    cd awesome-project-name
#+END_SRC

** Hello world with stack
  :PROPERTIES:
  :CUSTOM_ID: hello-world-with-stack
  :END:

\toReview
Appreciate what happens when this is build:

#+BEGIN_SRC sh
    stack build && stack exec awesome-project-name-exe
#+END_SRC

\toReview
This should build successfully and output =someFunc=. Open up
=src/Lib.hs= with one's favorite editor. This contains a few lines,
created by stack:

#+BEGIN_SRC haskell
    module Lib
        ( someFunc
        ) where

    someFunc :: IO ()
    someFunc = putStrLn "someFunc"
#+END_SRC

\toReview
This is where the =someFunc= output came from when the program was ran.
Change it to something a bit more appropriate, and rename the function
too:

#+BEGIN_SRC haskell
    module Lib
        ( webAppEntry
        ) where

    webAppEntry :: IO ()
    webAppEntry = putStrLn "This is the beginning of my greetings to world"
#+END_SRC

\toReview
Does it compile?

#+BEGIN_SRC sh
    stack build && stack exec awesome-project-name-exe

    /home/jappie/projects/haskell/awesome-project-name/app/Main.hs:6:8: error: Variable not in scope: someFunc :: IO ()
      \|
    6 \| main = someFunc
      \|        ^^^^^^^^
#+END_SRC

\toReview
It does not compile. There is an app folder where by default all the
executable reside (which is where the error occurs), and a =src= folder
where the library code lives (the modified file is in there). One can
future proving themselves by putting as much code in the library as is
reasonable.

\toReview
Fix the error in =app/Main.hs=:

#+BEGIN_SRC haskell
    module Main where

    import Lib

    main :: IO ()
    main = webAppEntry
#+END_SRC

\toReview
It builds! Functions can be renamed, simple compile errors can be
solved, and strings can be changed. Progress!

** Servant: Your first dependencies
  :PROPERTIES:
  :CUSTOM_ID: servant-your-first-dependencies
  :END:

\toReview
For the impatient, there is a minimal example already
[[https://github.com/haskell-servant/example-servant-minimal][available]]
by the library author. This guide will explain how to get there step by
step. In =./package.yaml=, on line 22 there is a =dependencies= key, add
=servant-server=, =aeson=, =wai= and =warp= to it like this:

#+BEGIN_EXAMPLE
    dependencies:
    - base >= 4.7 && < 5
    - servant-server
    - aeson
    - wai
    - warp 
#+END_EXAMPLE

\toReview
It may seem strange to immediately add four new dependencies, however
this is because Haskell libraries are setup to be flexible. Even small
projects grow quickly to have into the twenties of dependencies. Code
reuse is not [[https://www.youtube.com/watch?v=Jn3kdTaa69U][a myth]].

\toReview
=servant-server= is the
[[http://haskell-servant.readthedocs.io/en/stable/][servant web
server]]. [[http://hackage.haskell.org/package/aeson][=aeson=]] is for
JSON parsing and producing.
[[http://hackage.haskell.org/package/wai][=wai=]] is a web application
interface and [[http://hackage.haskell.org/package/warp][=warp=]] uses
=wai= to implement a web application (it binds to the port).

\toReview
Ensure that that this is done at the root of the yaml file (no
indentation). Stack provides a way of specifying dependencies of either
the executable or library. If its done on line 22, the root of the yaml
file, it will be a dependency for everything in the project.

** A minimal servant
  :PROPERTIES:
  :CUSTOM_ID: a-minimal-servant
  :END:

\toReview
A good start is going to servants'
[[http://hackage.haskell.org/package/servant][Hackage]] page, which
linked to a
[[http://haskell-servant.readthedocs.io/en/stable/tutorial/index.html][tutorial]].
Servant does API definition
[[http://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html][at
type level]].

\toReview
If it's unknown to the reader what a type is, think of it as describing
the shape of a function. Functions of different shapes don't fit
together, and won't compile. What servant allows us to do is define this
shape for a REST API. To gain a deeper understanding of this a concrete
example will be inspected line by line. First all lines are listed for a
minimal servant (=Lib.hs=) server:

#+BEGIN_SRC haskell
    {-# LANGUAGE DataKinds #-}
    {-# LANGUAGE TypeOperators #-}
    {-# LANGUAGE DeriveGeneric #-}

    module Lib
        ( webAppEntry
        ) where

    import Servant(serve, Proxy(..), Server, JSON, Get, (:>))
    import Data.Aeson(ToJSON)
    import GHC.Generics(Generic)
    import Network.Wai(Application)
    import Network.Wai.Handler.Warp(run)

    type UserAPI = "users" :> Get '[JSON] [User]

    data User = User
      { name :: String
      , email :: String
      } deriving (Eq, Show, Generic)

    instance ToJSON User

    users :: [User]
    users =
      [ User "Isaac Newton"    "isaac@newton.co.uk"
      , User "Albert Einstein" "ae@mc2.org"
      ]

    server :: Server UserAPI
    server = return users

    userAPI :: Proxy UserAPI
    userAPI = Proxy

    app :: Application
    app = serve userAPI server

    webAppEntry :: IO ()
    webAppEntry = run 6868 app
#+END_SRC

*** Language extensions
   :PROPERTIES:
   :CUSTOM_ID: language-extensions
   :END:

\toReview
The first three lines are languages extensions, Haskell behaves
different for this module according to these. data kinds Can be
temporary deleted to see what happens:

#+BEGIN_SRC sh
    /home/jappie/projects/haskell/awesome-project-name/src/Lib.hs:14:16: error:
        Illegal type: ‘"users"’ Perhaps you intended to use DataKinds
       |
    14 | type UserAPI = "users" :> Get '[JSON] [User]
       |                ^^^^^^^

    /home/jappie/projects/haskell/awesome-project-name/src/Lib.hs:14:31: error:
        Illegal type: ‘'[JSON]’ Perhaps you intended to use DataKinds
       |
    14 | type UserAPI = "users" :> Get '[JSON] [User]
       |                               ^^^^^^^
#+END_SRC

\toReview
Data kinds is needed to insert data into a type. A string being data in
this case, it is unclear what ='[JSON]= is, probably also something
data. Temporary breaking a program to see what GHC will say is an
effective way of learning more about Haskell.

\toReview
If =TypeOperators= is disabled, GHC says it doesn't like =:>= in the
=UserAPI= line. Apparently =:>= is a type operator. Apparently types can
have operators.

\toReview
If =DeriveGeneric= is disabled, GHC says it needs to derive
[[https://wiki.haskell.org/GHC.Generics][generic]] in the data
definition of User. Generic is required for serialization (in our case
JSON conversion).

*** Modules
   :PROPERTIES:
   :CUSTOM_ID: modules
   :END:

#+BEGIN_SRC haskell
    module Lib
        ( webAppEntry
        ) where

    import Servant(serve, Proxy(..), Server, JSON, Get, (:>))
    import Data.Aeson(ToJSON)
    import GHC.Generics(Generic)
    import Network.Wai(Application)
    import Network.Wai.Handler.Warp(run)
#+END_SRC

\toReview
Moving onward, there is the module definition that stack generated,
modules are just namespaces, or similar to python modules. Nothing
really special about those. Then there are many imports which pull
functions into the module namespace.

*** Type level REST API
   :PROPERTIES:
   :CUSTOM_ID: type-level-rest-api
   :END:

#+BEGIN_SRC haskell
    type UserAPI = "users" :> Get '[JSON] [User]
#+END_SRC

\toReview
This line defines the UserAPI type, which will serve as the REST
endpoint. The image at the beginning of the post was about this line.
Perhaps reading it as a sentence will give us some insight, without
worrying about how it fits together: It's a Get request, mounted below
=/user=, returning something JSON and of shape/type User. Conveniently
what a =User= is will be discussed in the next section.

*** Domain data
   :PROPERTIES:
   :CUSTOM_ID: domain-data
   :END:

#+BEGIN_SRC haskell
    data User = User
      { name :: String
      , email :: String
      } deriving (Eq, Show, Generic)

    instance ToJSON User
#+END_SRC

\toReview
User is just a data structure consisting of two strings: Email and name.
This declaration method is called
[[http://learnyouahaskell.com/making-our-own-types-and-typeclasses#record-syntax][record
syntax]]. This data structure derives
[[https://hackage.haskell.org/package/base-4.9.1.0/docs/Text-Show.html][Show]],
[[http://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Eq.html][Eq]]
and Generic. Deriving means that GHC will generate function
implementations for this data structure. If one calls =show= on a User,
it will know what to do (show is toString in Haskell).
=instance ToJSON User= allows the User to be converted to JSON
(implementation is provided by generic).

*** Functions
   :PROPERTIES:
   :CUSTOM_ID: functions
   :END:

\toReview
Done with data, time for code!

#+BEGIN_SRC haskell
    users :: [User]
#+END_SRC

\toReview
Specifies a function that will always return a list of Users. There are
no arguments to this function. It can be assumed the list is always the
same. This is how immutable constants are specified.

#+BEGIN_SRC haskell
    users =
      [ User "Isaac Newton"    "isaac@newton.co.uk"
      , User "Albert Einstein" "ae@mc2.org"
      ]
#+END_SRC

\toReview
This is the implementation of the before defined function. There are
apparently two users in this list, one Isaac, and another Einstein. Note
that positional arguments are used to create the Users.

*** Servant server
   :PROPERTIES:
   :CUSTOM_ID: servant-server
   :END:

#+BEGIN_SRC haskell
    server :: Server UserAPI
#+END_SRC

\toReview
=server :: Server UserAPI= says that there is something called a Server
which has a UserAPI. A UserAPI is known, it is defined above. A
[[http://hackage.haskell.org/package/servant-server-0.14/docs/Servant-Server.html#t:Server][=Server=]]
is defined in servant. The type signature is rather complicated:
=type Server api = ServerT api Handler=, looking at the definition of
=ServerT= introduces a lot of complexity:
=type ServerT api (m :: * -> *) :: *=.

\toReview
There are some clues that can be derived (such as that =m=), but it's
not that important to make something work. Therefore this guide ignores
it. Note that ignoring scary looking things is an important Haskell
technique. If one is interested, help can be found
[[https://groups.google.com/forum/#!forum/haskell-servant][here]], just
in case.

#+BEGIN_SRC haskell
    server = return users
#+END_SRC

\toReview
The implementation is very simple however. The reader should be
cautious, to think that return is a keyword. It's a function. What both
return does is wrap a value into a container. For example an element can
be wrapped in a list: =return 2 == [2]=. That's all one needs to know
for now (the interested reader may look at
[[https://wiki.haskell.org/Monad#Monad_class][monads]]).

*** Proxy
   :PROPERTIES:
   :CUSTOM_ID: proxy
   :END:

#+BEGIN_SRC haskell
    userAPI :: Proxy UserAPI
    userAPI = Proxy
#+END_SRC

\toReview
This is just some type
[[http://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Proxy.html][level
magic]]. Library author needed type information for a function, but they
didn't need a value. Proxy does that. It's useful if you store data at
type level, for example with the datakinds language extension, which was
seen earlier.

*** Application
   :PROPERTIES:
   :CUSTOM_ID: application
   :END:

#+BEGIN_SRC haskell
    app :: Application
    app = serve userAPI server
#+END_SRC

\toReview
This combines the proxy and server. A serve function takes a Proxi API,
Server API and returns an application. If type Application is inspected
one can appreciate what serve does for us better:

#+BEGIN_SRC haskell
    type Application = Request -> (Response -> IO ResponseReceived) -> IO ResponseReceived 
#+END_SRC

\toReview
The arrows indicate function arguments. An application receives a
request, then a callback which expects a =Response= to produce an IO
action which gives the result =ResponseReceived=. However to return this
function must also return a type =ResponseReceived= wrapped in IO. It
may be the case that the only way to obtain this response received is to
call that callback. The freedom to do whatever one wants is meanwhile
granted with the IO return type. To compile that =ResponseReceived= has
to be obtained however.

*** Running it!
   :PROPERTIES:
   :CUSTOM_ID: running-it
   :END:

#+BEGIN_SRC haskell
    webAppEntry :: IO ()
    webAppEntry = run 6868 app
#+END_SRC

\toReview
Our initial function! Rather than saying hello world the app is ran on
port 6868 (best port). Now build and run it in one terminal, and in
another curl it:

#+BEGIN_SRC sh
    stack build && stack exec awesome-project-name-exe &
    curl localhost:6868/users

    > [{"email":"isaac@newton.co.uk","name":"Isaac Newton"},{"email":"ae@mc2.org","name":"Albert Einstein"}]
#+END_SRC

** In conclusion
  :PROPERTIES:
  :CUSTOM_ID: in-conclusion
  :END:

\toReview
A lot of concepts have been treated within this blog post while also
moving towards something productive. The reader can now start a new
project and add arbitrary dependencies. He knows what language
extensions are and how to see them in use. Type level magic has been
encountered, and wisely was ignored. In future this post will build on
top of this work to extend the API and do something with something
within the handlers. However this post has grown to big already.

\toReview
The complete code can be found
[[https://github.com/jappeace/awesome-project-name/tree/simple-servent-setup][here]].
